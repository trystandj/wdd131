W03
Web Design Principles

CSS variables allow you to define reusable values in one place. For example, defining a color scheme or 
spacing values as variables reduces the need to update multiple CSS rules when changes are required.

Example: 
:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
}

button {
  background-color: var(--primary-color);
}

a {
  color: var(--secondary-color);
}

CSS variables can be updated dynamically using JavaScript
, CSS variables are part of the DOM and can be scoped to specific elements.

Using descriptive variable names makes CSS more readable and self-documenting, reducing the cognitive load for developers.
his activity explores SVG (Scalar Vector Graphic) and the WebP image format which offers better compression to support faster page loads.
"WebP is a modern image format that provides superior lossless and lossy compression for images on the web. Using WebP, webmasters and web 
developers can create smaller, richer images that make the web faster." - developers.google.com

The SVG format is a vector image format that is used for two-dimensional graphics with support for interactivity and animation. 
"As such, it's a text-based, open Web standard for describing images that can be rendered cleanly at any size and are designed specifically to work well
 with other web standards including CSS, DOM, JavaScript, and SMIL. SVG is, essentially, to graphics what HTML is to text." - MDN

 Link for differnt img types:
 https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types


 "The older formats like PNG, JPEG, GIF have poor performance compared to newer formats like WebP and AVIF, but enjoy broader "historical" browser support. The newer image 
 formats are seeing increasing popularity as browsers without support become increasingly irrelevant (meaning have virtually zero market share)." - MDN

  convert site:
  https://cloudconvert.com/jpg-to-webp
  Image Optimization: 
  https://byui-cse.github.io/wdd131-ww-course/resources/image-optimization.html


  "Serving desktop-sized images to mobile devices can use 2-4x more data than needed. Instead of a "one-size-fits-all" approach to images, serve different image sizes 
  to different devices. How many image versions should you create? There is no single 'correct' answer to this question. However, it's common to serve 3-5 different 
  sizes of an image. Serving more image sizes is better for performance, but will take up more space on your servers and require writing a tiny bit more HTML." - Web.dev


Standards: 
https://byui-cse.github.io/wdd131-ww-course/resources/dev-standards.html



<picture>
  <source media="(max-width: 799px)" srcset="elva-480w-close-portrait.jpg" />
  <source media="(min-width: 800px)" srcset="elva-800w.jpg" />
  <img src="elva-800w.jpg" alt="Chris standing up holding his daughter Elva" />
</picture>

 the first one that returns true will be displayed. In this case, if the viewport width 
 is 799px wide or less, the first <source> element's image will be displayed. If the viewport width is 800px or more, it'll be the second one.


 <picture>
  <source srcset="images/hero-large.webp" media="min-width: 1000px">
  <source srcset="images/hero-medium.webp" media="min-width: 550px">
  <img src="images/hero-small.webp" alt="Orem Utah Temple" width="400" height="200">
</picture>


scores.push(100); // Adds a new element to the end of the array
scores.pop(); // Removes the last element from the array
scores.shift(); // Removes the first element from the array
scores.unshift(100); // Adds a new element to the beginning of the array
scores.slice(2,3); // Cut out a portion of the array starting at an index for a given length
scores.splice(2, 1); // Removes 1 element from the array starting at index 2
scores.join(', '); // transform the array into a single string with a comma and space delimiter option

for (let i = 0; i < scores.length; i++) {
  console.log(scores[i]);
}
Preferred: Arrays can be iterated over using other looping structures like forEach:

scores.forEach(function(score) {
  console.log(score);
});

let aScore = scores[0];  // The aScore variable is assigned the value of 100
Arrays values can be modified:

scores[0] = 99;



function myFunc(theObject) {
  theObject.make = "Toyota";
}

const myCar = {
  make: "Honda",
  model: "Accord",
  year: 1998,
};

console.log(myCar.make); // "Honda"
myFunc(myCar);
console.log(myCar.make);


function myFunc(theArr) {
	theArr[0] = 30;
  }
  
  const arr = [45];
  
  console.log(arr[0]); // 45
  myFunc(arr);
  console.log(arr[0]); // 30



Function Hoisting 

console.log(square(5)); // 25

function square(n) {
  return n * n;
}

This code runs without any error, despite the square() function being called before it's declared. This 
is because the JavaScript interpreter hoists the entire function declaration to the top of the current scope,
 so the code above is equivalent to:


Function hoisting only works with function declarations â€” not with function expressions. The following code will not work:

js
Copy to Clipboard
console.log(square(5)); // ReferenceError: Cannot access 'square' before initialization
const square = function (n) {
  return n * n;
};



Recursion:

A function that calls itself is called a recursive function. In some ways, recursion is analogous to a loop. Both 
execute the same code multiple times, 
and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case).
.
function loop(x) {
  // "x >= 10" is the exit condition (equivalent to "!(x < 10)")
  if (x >= 10) {
    return;
  }
  // do stuff
  loop(x + 1); // the recursive call
}
loop(0);

However, some algorithms cannot be simple iterative loops. For example, getting all the nodes of a
 tree structure (such as the DOM) is easier via recursion:

js
Copy to Clipboard
function walkTree(node) {
  if (node === null) {
    return;
  }
  // do something with node
  for (let i = 0; i < node.childNodes.length; i++) {
    walkTree(node.childNodes[i]);
  }
}


The following example shows nested functions:

js
Copy to Clipboard
function addSquares(a, b) {
  function square(x) {
    return x * x;
  }
  return square(a) + square(b);
}

console.log(addSquares(2, 3)); // 13
console.log(addSquares(3, 4)); // 25
console.log(addSquares(4, 5)); // 41


Example:
Assuming you have the following HTML:
<div id="fullName"></div>

And the following JavaScript function:
function fullName(firstName, lastName) {
    return firstName + ' ' + lastName;
}



JS and HTML example

let firstName = 'John';
let lastName = 'Doe';

document.querySelector('#fullName').innerHTML = fullName(firstName, lastName);

Explanation:
The fullName function concatenates firstName and lastName with a space in between.
document.querySelector('#fullName') selects the <div> element with the ID fullName.
.innerHTML = fullName(firstName, lastName) sets the inner HTML of the selected <div> to "John Doe".
After running the script, the HTML will be:

<div id="fullName">John Doe</div>

This effectively displays "John Doe" inside the <div> element with the ID fullName




Lazy loading:
The loading attribute has only two states, lazy and eager. The eager value instructs the browser to render the resource immediately and is the default. The lazy attribute
 will defer loading the element, such as an <img> or <iframe>, until the element is called into view by some user action, such as scrolling.


